var documenterSearchIndex = {"docs":
[{"location":"#CanopyRadiativeTransfer.jl","page":"Home","title":"CanopyRadiativeTransfer.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Canopy radiative transfer module for CliMA Land model.","category":"page"},{"location":"#Install","page":"Home","title":"Install","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg;\nPkg.add(\"CanopyRadiativeTransfer\");","category":"page"},{"location":"API/#CanopyRadiativeTransfer","page":"API","title":"CanopyRadiativeTransfer","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"CurrentModule = CanopyRadiativeTransfer","category":"page"},{"location":"API/#Leaf-Inclination-Angle","page":"API","title":"Leaf Inclination Angle","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"lidf_cdf\ninclination_angles!","category":"page"},{"location":"API/#CanopyRadiativeTransfer.lidf_cdf","page":"API","title":"CanopyRadiativeTransfer.lidf_cdf","text":"lidf_cdf(lidf::VerhoefLIDF{FT}, θ::FT) where {FT<:AbstractFloat}\n\nReturn the cumulative distribution frequency, given\n\nlidf VerhoefLIDF type algorithm\nθ Leaf inclination angle in [°]\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyRadiativeTransfer.inclination_angles!","page":"API","title":"CanopyRadiativeTransfer.inclination_angles!","text":"inclination_angles!(can::Union{BroadbandSLCanopy{FT}, HyperspectralMLCanopy{FT}}, lidf::VerhoefLIDF{FT}) where {FT<:AbstractFloat}\n\nUpdate the frequency of leaf inclination angles, given\n\ncan HyperspectralMLCanopy type multiple layer canopy\nlidf VerhoefLIDF type algorithm\n\n\n\n\n\n","category":"function"},{"location":"API/#Clumping-Index","page":"API","title":"Clumping Index","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"clumping_index!","category":"page"},{"location":"API/#CanopyRadiativeTransfer.clumping_index!","page":"API","title":"CanopyRadiativeTransfer.clumping_index!","text":"clumping_index!(can::HyperspectralMLCanopy, angles::SunSensorGeometry{FT}) where {FT<:AbstractFloat}\n\nUpdate the clumping index, given\n\ncan HyperspectralMLCanopy type canopy\nangles SunSensorGeometry type angles\n\n\n\n\n\n","category":"function"},{"location":"API/#Hyperspectral-Canopy-RT","page":"API","title":"Hyperspectral Canopy RT","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"soil_albedo!\nextinction_coefficient\nextinction_coefficient(sza::FT, lia::FT) where {FT<:AbstractFloat}\nextinction_coefficient(lia::FT) where {FT<:AbstractFloat}\nextinction_coefficient(sza::FT, vza::FT, raa::FT, lia::FT) where {FT<:AbstractFloat}\nextinction_scattering_coefficients!\nextinction_scattering_coefficients!(can::BroadbandSLCanopy{FT}, angles::SunSensorGeometry{FT}) where {FT<:AbstractFloat}\nextinction_scattering_coefficients!(can::HyperspectralMLCanopy{FT}, angles::SunSensorGeometry{FT}) where {FT<:AbstractFloat}\ncanopy_optical_properties!\ncanopy_optical_properties!(can::HyperspectralMLCanopy{FT}, angles::SunSensorGeometry{FT}) where {FT<:AbstractFloat}\ncanopy_optical_properties!(can::HyperspectralMLCanopy{FT}, albedo::BroadbandSoilAlbedo{FT}) where {FT<:AbstractFloat}\ncanopy_optical_properties!(can::HyperspectralMLCanopy{FT}, leaves::Vector{Leaves2D{FT}}, soil::Soil{FT}) where {FT<:AbstractFloat}\ncanopy_radiation!\ncanopy_radiation!(can::BroadbandSLCanopy{FT}, leaf::Leaves1D{FT}, rad::BroadbandRadiation{FT}, soil::Soil{FT}) where {FT<:AbstractFloat}\ncanopy_radiation!(can::HyperspectralMLCanopy{FT}, albedo::BroadbandSoilAlbedo{FT}) where {FT<:AbstractFloat}\ncanopy_radiation!(can::HyperspectralMLCanopy{FT}, leaves::Vector{Leaves2D{FT}}, rad::HyperspectralRadiation{FT}, soil::Soil{FT}) where {FT<:AbstractFloat}\ncanopy_radiation!(spac::Union{MonoMLGrassSPAC{FT}, MonoMLPalmSPAC{FT}, MonoMLTreeSPAC{FT}}) where {FT<:AbstractFloat}\ncanopy_fluorescence!","category":"page"},{"location":"API/#CanopyRadiativeTransfer.soil_albedo!","page":"API","title":"CanopyRadiativeTransfer.soil_albedo!","text":"soil_albedo!(can::HyperspectralMLCanopy{FT}, soil::Soil{FT}) where {FT<:AbstractFloat}\n\nUpdates lower soil boundary reflectance, given\n\ncan HyperspectralMLCanopy type struct\nsoil Soil type struct\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyRadiativeTransfer.extinction_coefficient","page":"API","title":"CanopyRadiativeTransfer.extinction_coefficient","text":"This function compute the extinction coefficients for direct and diffuse radiation for given leaf inclination. Supported methods are to\n\nCompute the coefficient for given direct solar zenith angle (SZA) and leaf inclination angle (LIA)\nCompute the coefficient for diffuse light at given LIA\nCompute the coefficients for given sun-sensor geometry\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyRadiativeTransfer.extinction_coefficient-Union{Tuple{FT}, Tuple{FT, FT}} where FT<:AbstractFloat","page":"API","title":"CanopyRadiativeTransfer.extinction_coefficient","text":"extinction_coefficient(sza::FT, lia::FT) where {FT<:AbstractFloat}\n\nReturn the extinction coefficient for direct radiation, given\n\nsza Solar zenith angle in °\nlia Leaf inclination angle in °\n\n\n\n\n\n","category":"method"},{"location":"API/#CanopyRadiativeTransfer.extinction_coefficient-Tuple{FT} where FT<:AbstractFloat","page":"API","title":"CanopyRadiativeTransfer.extinction_coefficient","text":"extinction_coefficient(lia::FT) where {FT<:AbstractFloat}\n\nReturn the extinction coefficient for diffuse radiation (unifrom 18 average angles from 2.5° to 87.5°), given\n\nsza Solar zenith angle in °\n\n\n\n\n\n","category":"method"},{"location":"API/#CanopyRadiativeTransfer.extinction_coefficient-Union{Tuple{FT}, NTuple{4, FT}} where FT<:AbstractFloat","page":"API","title":"CanopyRadiativeTransfer.extinction_coefficient","text":"extinction_coefficient(sza::FT, vza::FT, raa::FT, lia::FT) where {FT<:AbstractFloat}\n\nReturn the extinction and scattering coefficients (extinction coefficients from solar and viewing directions, and scattering coefficients for backward and forward directions, and some sin and cos     products: _Co, _Cs, _So, _Ss), given\n\nsza Solar zenith angle in °\nvza Viewing zenith angle in °\nraa Relative azimuth angle in °\nlia Leaf inclination angle in °\n\n\n\n\n\n","category":"method"},{"location":"API/#CanopyRadiativeTransfer.extinction_scattering_coefficients!","page":"API","title":"CanopyRadiativeTransfer.extinction_scattering_coefficients!","text":"This function updates the extinction (and scattering) coefficients for canopy. Supported methods are to\n\nUpdate coefficients for broadband single layer canopy\nUpdate coefficients for hyperspectral mutiple layers canopy\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyRadiativeTransfer.extinction_scattering_coefficients!-Union{Tuple{FT}, Tuple{ClimaCache.BroadbandSLCanopy{FT}, ClimaCache.SunSensorGeometry{FT}}} where FT<:AbstractFloat","page":"API","title":"CanopyRadiativeTransfer.extinction_scattering_coefficients!","text":"extinction_scattering_coefficients!(can::BroadbandSLCanopy{FT}, angles::SunSensorGeometry{FT}) where {FT<:AbstractFloat}\n\nUpdate the extinction and scattering coefficients, given\n\ncan BroadbandSLCanopy type canopy\nangles SunSensorGeometry type angles\n\n\n\n\n\n","category":"method"},{"location":"API/#CanopyRadiativeTransfer.extinction_scattering_coefficients!-Union{Tuple{FT}, Tuple{ClimaCache.HyperspectralMLCanopy{FT}, ClimaCache.SunSensorGeometry{FT}}} where FT<:AbstractFloat","page":"API","title":"CanopyRadiativeTransfer.extinction_scattering_coefficients!","text":"extinction_scattering_coefficients!(can::HyperspectralMLCanopy{FT}, angles::SunSensorGeometry{FT}) where {FT<:AbstractFloat}\n\nUpdate the extinction and scattering coefficients, given\n\ncan HyperspectralMLCanopy type canopy\nangles SunSensorGeometry type angles\n\n\n\n\n\n","category":"method"},{"location":"API/#CanopyRadiativeTransfer.canopy_optical_properties!","page":"API","title":"CanopyRadiativeTransfer.canopy_optical_properties!","text":"This function updates canopy optical properties for canopy. The supported methods are to\n\nUpdate the extinction coefficients\nUpdate the soil boundary conditions (not public function)\nUpdate scattering coefficient matrices\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyRadiativeTransfer.canopy_optical_properties!-Union{Tuple{FT}, Tuple{ClimaCache.HyperspectralMLCanopy{FT}, ClimaCache.SunSensorGeometry{FT}}} where FT<:AbstractFloat","page":"API","title":"CanopyRadiativeTransfer.canopy_optical_properties!","text":"canopy_optical_properties!(can::HyperspectralMLCanopy{FT}, angles::SunSensorGeometry{FT}) where {FT<:AbstractFloat}\n\nUpdates canopy optical properties (extinction coefficients for direct and diffuse light) based on the SAIL model, given\n\ncan HyperspectralMLCanopy type struct\nangles SunSensorGeometry type struct\n\n\n\n\n\n","category":"method"},{"location":"API/#CanopyRadiativeTransfer.canopy_optical_properties!-Union{Tuple{FT}, Tuple{ClimaCache.HyperspectralMLCanopy{FT}, ClimaCache.BroadbandSoilAlbedo{FT}}} where FT<:AbstractFloat","page":"API","title":"CanopyRadiativeTransfer.canopy_optical_properties!","text":"canopy_optical_properties!(can::HyperspectralMLCanopy{FT}, albedo::BroadbandSoilAlbedo{FT}) where {FT<:AbstractFloat}\ncanopy_optical_properties!(can::HyperspectralMLCanopy{FT}, albedo::HyperspectralSoilAlbedo{FT}) where {FT<:AbstractFloat}\n\nUpdates lower soil boundary reflectance, given\n\ncan HyperspectralMLCanopy type struct\nalbedo BroadbandSoilAlbedo or HyperspectralSoilAlbedo type soil albedo\n\n\n\n\n\n","category":"method"},{"location":"API/#CanopyRadiativeTransfer.canopy_optical_properties!-Union{Tuple{FT}, Tuple{ClimaCache.HyperspectralMLCanopy{FT}, Array{ClimaCache.Leaves2D{FT}, 1}, ClimaCache.Soil{FT}}} where FT<:AbstractFloat","page":"API","title":"CanopyRadiativeTransfer.canopy_optical_properties!","text":"canopy_optical_properties!(can::HyperspectralMLCanopy{FT}, leaves::Vector{Leaves2D{FT}}, soil::Soil{FT}) where {FT<:AbstractFloat}\n\nUpdates canopy optical properties (scattering coefficient matrices), given\n\ncan HyperspectralMLCanopy type struct\nleaves Vector of Leaves2D\nsoil Bottom soil boundary layer\n\n\n\n\n\n","category":"method"},{"location":"API/#CanopyRadiativeTransfer.canopy_radiation!","page":"API","title":"CanopyRadiativeTransfer.canopy_radiation!","text":"This function updates canopy radiation profiles. The supported methods are to\n\nUpdate shortwave radiation profile for broadband or hyperspectral canopy\nUpdates soil shortwave radiation profiles\nUpdate longwave radation profile for broadband or hyperspectral canopy\nUpdate radiation profile for SPAC\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyRadiativeTransfer.canopy_radiation!-Union{Tuple{FT}, Tuple{ClimaCache.BroadbandSLCanopy{FT}, ClimaCache.Leaves1D{FT}, ClimaCache.BroadbandRadiation{FT}, ClimaCache.Soil{FT}}} where FT<:AbstractFloat","page":"API","title":"CanopyRadiativeTransfer.canopy_radiation!","text":"canopy_radiation!(can::BroadbandSLCanopy{FT}, leaf::Leaves1D{FT}, rad::BroadbandRadiation{FT}, soil::Soil{FT}) where {FT<:AbstractFloat}\ncanopy_radiation!(can::BroadbandSLCanopy{FT}, leaf::Leaves1D{FT}, rad::FT, soil::Soil{FT}) where {FT<:AbstractFloat}\n\nUpdates shortwave or longwave radiation profiles, given\n\ncan HyperspectralMLCanopy type struct\nleaf Leaves1D type struct\nrad Broadband shortwave or longwave radiation\nsoil Soil type struct\n\n\n\n\n\n","category":"method"},{"location":"API/#CanopyRadiativeTransfer.canopy_radiation!-Union{Tuple{FT}, Tuple{ClimaCache.HyperspectralMLCanopy{FT}, ClimaCache.BroadbandSoilAlbedo{FT}}} where FT<:AbstractFloat","page":"API","title":"CanopyRadiativeTransfer.canopy_radiation!","text":"canopy_radiation!(can::HyperspectralMLCanopy{FT}, albedo::BroadbandSoilAlbedo{FT}) where {FT<:AbstractFloat}\ncanopy_radiation!(can::HyperspectralMLCanopy{FT}, albedo::HyperspectralSoilAlbedo{FT}) where {FT<:AbstractFloat}\n\nUpdates soil shortwave radiation profiles, given\n\ncan HyperspectralMLCanopy type struct\nalbedo BroadbandSoilAlbedo or HyperspectralSoilAlbedo type soil albedo\n\n\n\n\n\n","category":"method"},{"location":"API/#CanopyRadiativeTransfer.canopy_radiation!-Union{Tuple{FT}, Tuple{ClimaCache.HyperspectralMLCanopy{FT}, Array{ClimaCache.Leaves2D{FT}, 1}, ClimaCache.HyperspectralRadiation{FT}, ClimaCache.Soil{FT}}} where FT<:AbstractFloat","page":"API","title":"CanopyRadiativeTransfer.canopy_radiation!","text":"canopy_radiation!(can::HyperspectralMLCanopy{FT}, leaves::Vector{Leaves2D{FT}}, rad::HyperspectralRadiation{FT}, soil::Soil{FT}; APAR_CAR::Bool = true) where {FT<:AbstractFloat}\ncanopy_radiation!(can::HyperspectralMLCanopy{FT}, leaves::Vector{Leaves2D{FT}}, rad::FT, soil::Soil{FT}) where {FT<:AbstractFloat}\n\nUpdates canopy radiation profiles for shortwave or longwave radiation, given\n\ncan HyperspectralMLCanopy type struct\nleaves Vector of Leaves2D\nrad Incoming shortwave or longwave radiation\nsoil Bottom soil boundary layer\nAPAR_CAR Whether carotenoid absorption is counted in PPAR, default is true\n\n\n\n\n\n","category":"method"},{"location":"API/#CanopyRadiativeTransfer.canopy_radiation!-Union{Tuple{Union{ClimaCache.MonoMLGrassSPAC{FT}, ClimaCache.MonoMLPalmSPAC{FT}, ClimaCache.MonoMLTreeSPAC{FT}}}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"CanopyRadiativeTransfer.canopy_radiation!","text":"canopy_radiation!(spac::Union{MonoMLGrassSPAC{FT}, MonoMLPalmSPAC{FT}, MonoMLTreeSPAC{FT}}) where {FT<:AbstractFloat}\n\nUpdates canopy radiation profiles for shortwave and longwave radiation, given\n\nspac MonoMLGrassSPAC, MonoMLPalmSPAC, MonoMLTreeSPAC type SPAC\n\n\n\n\n\n","category":"method"},{"location":"API/#CanopyRadiativeTransfer.canopy_fluorescence!","page":"API","title":"CanopyRadiativeTransfer.canopy_fluorescence!","text":"canopy_fluorescence!(spac::Union{MonoMLGrassSPAC{FT}, MonoMLPalmSPAC{FT}, MonoMLTreeSPAC{FT}}) where {FT<:AbstractFloat}\n\nUpdates canopy fluorescence, given\n\nspac MonoMLGrassSPAC, MonoMLPalmSPAC, MonoMLTreeSPAC type SPAC\n\n\n\n\n\n","category":"function"},{"location":"API/#Remote-Sensing-Applications","page":"API","title":"Remote Sensing Applications","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"read_spectrum\nread_spectrum(x::Vector{FT}, y::Vector{FT}, target::FT) where {FT<:AbstractFloat}\nread_spectrum(x::Vector{FT}, y::Vector{FT}, x₁::FT, x₂::FT; steps::Int = 2) where {FT<:AbstractFloat}\nMODIS_EVI\nMODIS_EVI2\nMODIS_LSWI\nMODIS_NDVI\nMODIS_NIRv\nOCO2_SIF759\nOCO2_SIF770\nOCO3_SIF759\nOCO3_SIF770\nTROPOMI_SIF683\nTROPOMI_SIF740\nTROPOMI_SIF747\nTROPOMI_SIF751","category":"page"},{"location":"API/#CanopyRadiativeTransfer.read_spectrum","page":"API","title":"CanopyRadiativeTransfer.read_spectrum","text":"This function interpolate the spectrum to give values at the target wavelength bin(s). The supported methods include\n\nInterpolate the spectrum at a given wavelength\nInterpolate the spectrum in a given wavelength range\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyRadiativeTransfer.read_spectrum-Union{Tuple{FT}, Tuple{Vector{FT}, Vector{FT}, FT}} where FT<:AbstractFloat","page":"API","title":"CanopyRadiativeTransfer.read_spectrum","text":"read_spectrum(x::Vector{FT}, y::Vector{FT}, target::FT) where {FT<:AbstractFloat}\n\nReturn the spectrum value at target wavelength bin, given\n\nx X-axis of the spectrum\ny Y-axis of the spectrum\ntarget Target x value\n\n\n\n\n\n","category":"method"},{"location":"API/#CanopyRadiativeTransfer.read_spectrum-Union{Tuple{FT}, Tuple{Vector{FT}, Vector{FT}, FT, FT}} where FT<:AbstractFloat","page":"API","title":"CanopyRadiativeTransfer.read_spectrum","text":"read_spectrum(x::Vector{FT}, y::Vector{FT}, x₁::FT, x₂::FT; steps::Int = 2) where {FT<:AbstractFloat}\n\nReturn the spectrum value at target wavelength bin, given\n\nx X-axis of the spectrum\ny Y-axis of the spectrum\nx₁ Lower x boundary\nx₂ Upper x boundary\nsteps The incremental Δx is (x₂ - x₁) / steps\n\n\n\n\n\n","category":"method"},{"location":"API/#CanopyRadiativeTransfer.MODIS_EVI","page":"API","title":"CanopyRadiativeTransfer.MODIS_EVI","text":"MODIS_EVI(can::HyperspectralMLCanopy{FT}) where {FT<:AbstractFloat}\n\nReturn EVI for MODIS setup, given\n\ncan HyperspectralMLCanopy type canopy\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyRadiativeTransfer.MODIS_EVI2","page":"API","title":"CanopyRadiativeTransfer.MODIS_EVI2","text":"MODIS_EVI2(can::HyperspectralMLCanopy{FT}) where {FT<:AbstractFloat}\n\nReturn EVI2 for MODIS setup, given\n\ncan HyperspectralMLCanopy type canopy\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyRadiativeTransfer.MODIS_LSWI","page":"API","title":"CanopyRadiativeTransfer.MODIS_LSWI","text":"MODIS_LSWI(can::HyperspectralMLCanopy{FT}) where {FT<:AbstractFloat}\n\nReturn LSWI for MODIS setup, given\n\ncan HyperspectralMLCanopy type canopy\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyRadiativeTransfer.MODIS_NDVI","page":"API","title":"CanopyRadiativeTransfer.MODIS_NDVI","text":"MODIS_NDVI(can::HyperspectralMLCanopy{FT}) where {FT<:AbstractFloat}\n\nReturn NDVI for MODIS setup, given\n\ncan HyperspectralMLCanopy type canopy\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyRadiativeTransfer.MODIS_NIRv","page":"API","title":"CanopyRadiativeTransfer.MODIS_NIRv","text":"MODIS_NIRv(can::HyperspectralMLCanopy{FT}) where {FT<:AbstractFloat}\n\nReturn NIRv for MODIS setup, given\n\ncan HyperspectralMLCanopy type canopy\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyRadiativeTransfer.OCO2_SIF759","page":"API","title":"CanopyRadiativeTransfer.OCO2_SIF759","text":"OCO2_SIF759(can::HyperspectralMLCanopy{FT}) where {FT<:AbstractFloat}\n\nReturn SIF @ 759 nm for OCO2 setup, given\n\ncan HyperspectralMLCanopy type canopy\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyRadiativeTransfer.OCO2_SIF770","page":"API","title":"CanopyRadiativeTransfer.OCO2_SIF770","text":"OCO2_SIF770(can::HyperspectralMLCanopy{FT}) where {FT<:AbstractFloat}\n\nReturn SIF @ 770 nm for OCO2 setup, given\n\ncan HyperspectralMLCanopy type canopy\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyRadiativeTransfer.OCO3_SIF759","page":"API","title":"CanopyRadiativeTransfer.OCO3_SIF759","text":"OCO3_SIF759(can::HyperspectralMLCanopy{FT}) where {FT<:AbstractFloat}\n\nReturn SIF @ 759 nm for OCO3 setup, given\n\ncan HyperspectralMLCanopy type canopy\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyRadiativeTransfer.OCO3_SIF770","page":"API","title":"CanopyRadiativeTransfer.OCO3_SIF770","text":"OCO3_SIF770(can::HyperspectralMLCanopy{FT}) where {FT<:AbstractFloat}\n\nReturn SIF @ 770 nm for OCO3 setup, given\n\ncan HyperspectralMLCanopy type canopy\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyRadiativeTransfer.TROPOMI_SIF683","page":"API","title":"CanopyRadiativeTransfer.TROPOMI_SIF683","text":"TROPOMI_SIF683(can::HyperspectralMLCanopy{FT}) where {FT<:AbstractFloat}\n\nReturn SIF @ 682.5 nm for TROPOMI setup, given\n\ncan HyperspectralMLCanopy type canopy\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyRadiativeTransfer.TROPOMI_SIF740","page":"API","title":"CanopyRadiativeTransfer.TROPOMI_SIF740","text":"TROPOMI_SIF740(can::HyperspectralMLCanopy{FT}) where {FT<:AbstractFloat}\n\nReturn SIF @ 740 nm for TROPOMI setup, given\n\ncan HyperspectralMLCanopy type canopy\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyRadiativeTransfer.TROPOMI_SIF747","page":"API","title":"CanopyRadiativeTransfer.TROPOMI_SIF747","text":"TROPOMI_SIF747(can::HyperspectralMLCanopy{FT}) where {FT<:AbstractFloat}\n\nReturn SIF @ 746.5 nm for TROPOMI setup, given\n\ncan HyperspectralMLCanopy type canopy\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyRadiativeTransfer.TROPOMI_SIF751","page":"API","title":"CanopyRadiativeTransfer.TROPOMI_SIF751","text":"TROPOMI_SIF751(can::HyperspectralMLCanopy{FT}) where {FT<:AbstractFloat}\n\nReturn SIF @ 750.5 nm for TROPOMI setup, given\n\ncan HyperspectralMLCanopy type canopy\n\n\n\n\n\n","category":"function"}]
}
